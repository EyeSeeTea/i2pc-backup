#!/bin/bash
set -e -u -o pipefail

repo_url="https://github.com/EyeSeeTea/i2pc-backup"
repo_branch="testing"
emails_on_error="cnb.notifications@gmail.com"
script_dir=$(cd "$(dirname "$0")" && pwd -P)
config_name_path="$script_dir/sysconfig"
repo_dir="$script_dir/config"
remote_user_path="$script_dir/ruser"
remote_password_path="$script_dir/pass"
log_file="/var/log/rsync_backup.log"
replace_script_path="/etc/cron_scripts/rsync_backup_linux"
default_backup_host="disco.cnb.csic.es"

stderr() { echo -e "$@" >&2; }

debug() { stderr "[$HOSTNAME $(date +%Y-%m-%d_%H-%M-%S)] $@"; }

die() { debug "$@"; exit 1; }

update_config() { local repo_url=$1 destination=$2
  debug "Getting $repo_url -> $destination"
  if test -d "$destination"; then
    debug "The repository exists, pull latest changes"
    cd "$destination"
    git checkout $repo_branch && git pull --force
  else
    debug "Cloning repository"
    git clone -b "$repo_branch" "https://github.com/EyeSeeTea/i2pc-backup" "$destination"
  fi
}

backup_to_module() { local rsync_module=$1 paths=$2
  local destination remote_host
  local remote_user=$(cat $remote_user_path 2>/dev/null || echo "root")
  remote_host=$(cat "$repo_dir/configs/backup-hosts" | base64 --decode |
      awk "\$1 == \"$rsync_module\"" | awk '{print $2}' | grep -m1 "." ||
        echo "$default_backup_host")
  destination="$remote_user@$remote_host::$rsync_module"
  debug "Backup contents: $paths"
  debug "Rsync destination: $destination"
  RSYNC_PASSWORD=$(cat $remote_password_path 2>/dev/null || true) rsync \
    -e 'ssh -o StrictHostKeyChecking=no' --archive --ignore-missing-args --delete --delete-excluded \
    $paths $destination
}

update_crontab() { local cron_path=$1
  crontab -l | grep -v "rsync_backup" | cat - "$cron_path" | crontab -
}

get_from_update_server() { local path=$1
  local update_servers_path="$repo_dir/configs/update_servers"
  test -e "$update_servers_path" || die "Update servers file not found: $update_servers_path"
  for host in $(cat "$update_servers_path"); do
    debug "Get update file: $host:$path"
    debug rsync -a --contimeout=5 --timeout=5 $host::updates/$path "$script_dir/"
    rsync -a --contimeout=5 --timeout=5 $host::updates/$path "$script_dir/" && break || true
  done
  test -e "$script_dir/$path" && echo "$script_dir/$path" || die "Could not get file from server: $path"
}

get_latest_script_version() {
  local latest_script="$repo_dir/cron_scripts/rsync_backup_linux"
  if test -e "$latest_script" && test "$(md5sum < "$latest_script")" != "$(md5sum < "$replace_script_path")"; then
    debug "New script version, replace old one"
    exec "$latest_script" replace_old </dev/null >/dev/null 2>/dev/null
  else
    debug "Script up-to-date: $replace_script_path"
  fi
}

backup() { local cmd=${1:-}
  local config_name
  test -e $config_name_path || die "File not found: $config_name_path"

  update_config "$repo_url" "$repo_dir"
  get_latest_script_version

  config_name=$(cat "$config_name_path")
  test -d "$repo_dir/configs/$config_name" || die "Config directory not found: $config_name"
  update_crontab "$repo_dir/configs/$config_name/cron"

  cat "$repo_dir/configs/$config_name/backup" | while read rsync_module frequency paths; do
    debug "Backup: module=$rsync_module, frequency=$frequency, paths=\"$paths\""
    backup_to_module "$rsync_module" "$paths $log_file"
  done

  debug "Done"
}

notify_on_error() {
  local output retcode gmail_address gmail_password

  # Duplicate fd 1 (stdout) so we can both capture output to variable and show in console
  set +e
  exec 3>&1
  output=$(set -e && "$@" 2>&1 | tee >(cat - >&3))
  retcode=$?

  if ! test "$retcode" -eq 0; then
    sendemail_auth=$(get_from_update_server "sendemail.auth")
    read gmail_address gmail_password < "$sendemail_auth"
    debug "Send email: $emails_on_error"
    sendEmail -u "[i2pc-backup] Error: $HOSTNAME" -s "smtp.gmail.com:587" -o "tls=yes" -xu "$gmail_address" \
      -xp "$gmail_password" -f "$gmail_address" -m "$output" -t "$emails_on_error"
  fi
  set -e
  return "$retcode"
}

log() { local log_file=$1; shift 1
  "$@" 2>&1 | tee -a "$log_file"
}

replace_old() {
  current_script="$script_dir/$(basename $0)"
  debug "Copy script: $current_script -> $replace_script_path"
  cp "$current_script" "$replace_script_path"
  chmod 755 "$replace_script_path"
  debug "Exec new script: $replace_script_path"
  exec "$replace_script_path" </dev/null >/dev/null 2>/dev/null
}

main() {
  if test $# -ge 1; then
    if test "$1" = "replace_old"; then
      replace_old
    else
      die "Unknown argument: $1"
    fi
  else
    backup
  fi
}

log "$log_file" notify_on_error main "$@"